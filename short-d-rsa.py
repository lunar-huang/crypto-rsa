# 将字符串消息转换为整数
def string_to_int(message):
    return int.from_bytes(message.encode('utf-8'), byteorder='big')

# 将整数转换回字符串消息
def int_to_string(m):
    try:
        return m.to_bytes((m.bit_length() + 7) // 8, byteorder='big').decode('utf-8')
    except:
        return "Failed to decode the message."

# 加密函数
def encrypt(plaintext, e, n):
    m = string_to_int(plaintext)
    c = pow(m, e, n)
    return c

# 解密函数
def decrypt(ciphertext, d, n):
    m = pow(ciphertext, d, n)
    return int_to_string(m)

# 设置固定的 RSA 参数
p = 2912249246407350784176046272217635824348493994639691593570341100704567652062349668400102883536701013041993716182991702632322195215646016988444403408894047
# 您生成的 p
q = 2912249246407350784176046272217635824348493994639691593570341100704567652062349668400102883536701013041993716182991702632322195215646016988444403408893193
# 您生成的 q
# n = 8481195673200182544314333636422681184770235187561356341074832718478809948029958736010243391427072327240199060569017705518429093442885923194935113674892540032802667094215902845071762410968570425198783144069149168677077153577104026130720629574459162365403186104045162417124882063594871999469390011712476522071
n = p * q
phi = (p - 1) * (q - 1)
d = 17  # 您生成的小解密指数 d
e = 1995575452517690010426902032099454396416525926485025021429372404347955281889402055531821974453428782880046837780945342474924492574796687810572967923504125696071570418709255174818639523693393347814304438749638124234088410456894094454443253969104020932559318145085363866757557039812809578220097205389566761137
# 对应的 e

# 加密消息
message = "SHORT_D_RSA"
ciphertext = encrypt(message, e, n)

print("\n--- RSA Encryption ---")
print(f"Original message: {message}")
print(f"Encrypted message (as number): {ciphertext}")
print(f"Public key: (e={e}, n={n})")
print(f"Private key: d={d}")
print(f"Factors: p={p}, q={q}")
